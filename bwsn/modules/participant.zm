/******************************************************************************\
FILE:           participant.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Provides participant database record field create and check functions.


HISTORY:
2011-08-27 TV   Created as part of the standard Zep modules.

\******************************************************************************/

plugin zep_file;

int[..] PARTICIPANT_CHOSEN_ORDER;

// Creates required participant record fields.
void create_participant_fields()
{
    expdb.participant.add_string_field("ORDER_SOURCE_PPID");

    expdb.participant.set_string_field("ORDER_SOURCE_PPID", previous_participant_with_empty_order());
    
}

string previous_participant_with_empty_order()
{
    string result = "";

    int nparticipants = expdb.num_participants;
    string current_participant = expdb.participant.id;
    
    if(nparticipants <= 1)
        return result;

    expdb.checkin_participant(); // Note: we should definitely restore this!
    string previous_pp_id = expdb.participant_id(nparticipants-2);

    expdb.checkout_participant(previous_pp_id, true);
    println(selected_group);
    if(expdb.participant.has_string_field("ORDER_SOURCE_PPID") && expdb.participant.get_string_field("ORDER_SOURCE_PPID") == "")
        result = expdb.participant.id;
    expdb.checkin_participant();


    expdb.checkout_participant(current_participant, false); // this is where we restore the checkin!

    return result;
}

// Checks current values of participant record fields.
int check_participant_fields()
{
    int result = OK;

    if (!expdb.participant.has_string_field("ORDER_SOURCE_PPID")) return ERROR;


    if(expdb.participant.get_string_field("ORDER_SOURCE_PPID") != "")
        result = load_participant_order(expdb.participant.get_string_field("ORDER_SOURCE_PPID"));
    else
        PARTICIPANT_CHOSEN_ORDER.size = 0;

    return result;
}

int load_participant_order(string ppid)
{   
    string filepath_order = data_dir() + "orders";

    if(!file_exists(filepath_order))
        create_dir_tree(filepath_order);

    string filepath = filepath_order + "/" + ppid + ".csv";

    if(file_exists(filepath) && file_readable(filepath))
    {
        println("Loading in order from: " + ppid);
        PARTICIPANT_CHOSEN_ORDER.load(filepath, true, 1);
        println("Done");
    }
    else
    {
        println("Error: could not read stimuli order from selected previous participant: " + ppid + ". Does it/he/she exist?");
        return ERROR;
    }

    return OK;
}

void write_participant_order_to_file()
{
    string ppid = expdb.participant.id;
    string filepath = data_dir() + "orders/" + ppid + ".csv";

    if(file_exists(filepath))
        println("Warning: overwriting order of " + ppid);
    if(PARTICIPANT_CHOSEN_ORDER.size == 0)
        println("Warning: exporting empty order");
    else
        PARTICIPANT_CHOSEN_ORDER.save(filepath, ppid);
}
